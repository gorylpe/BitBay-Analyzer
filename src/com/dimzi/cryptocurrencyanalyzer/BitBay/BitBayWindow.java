package com.dimzi.cryptocurrencyanalyzer.BitBay;

import com.dimzi.cryptocurrencyanalyzer.ExchangeManager;
import model.BitBayCurrencyData;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;

public class BitBayWindow implements BitBayCurrencyObserver {
    private BitBayPlotPanel plotPanel;
    private JPanel panelMain;
    private JSpinner startSpinner;
    private JSpinner rangeSpinner;
    private JLabel rangeLabel;
    private JCheckBox averagesCheckBox;
    private JCheckBox lastCheckBox;

    private ArrayList<BitBayCurrencyData> currencyData;

    /**
     * Constructor of BitBayWindow class.
     * Starts manager of exchange, initializes elements and listeners.
     */
    public BitBayWindow() {
        BitBayManager.INSTANCE.attachObserver(this);
        BitBayManager.INSTANCE.notifyAllObservers();

        averagesCheckBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                plotPanel.setDrawingAverages(true);
            } else {
                plotPanel.setDrawingAverages(false);
            }
            refresh();
        });

        lastCheckBox.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                startSpinner.setEnabled(false);
            } else {
                startSpinner.setEnabled(true);
            }
            refresh();
        });

        startSpinner.addChangeListener((ChangeEvent e) -> {
            refresh();
        });

        rangeSpinner.addChangeListener((ChangeEvent e) -> {
            refresh();
        });

        startSpinner.setValue(0);
        rangeSpinner.setValue(50);

        refresh();
    }

    private void refresh() {
        if (currencyData != null)
            setRange((int) startSpinner.getValue(), (int) rangeSpinner.getValue(), lastCheckBox.isSelected());
    }

    /**
     * Sets range of chosen data and takes care of wrong values
     *
     * @param start start of the interval
     * @param range range of the interval
     * @throws NullPointerException Whether data is null array
     */
    private void setRange(int start, int range, boolean lastRecords) throws NullPointerException {
        if (lastRecords) {
            start = currencyData.size() - 1 - range;
        }
        int end = start + range;
        if (start >= currencyData.size()) start = currencyData.size() - 1;
        if (end >= currencyData.size()) end = currencyData.size() - 1;
        if (start > end) start = end;
        if (start < 0) start = 0;
        if (end < 0) end = 0;

        List<BitBayCurrencyData> rangedData = currencyData.subList(start, end + 1);

        rangeLabel.setText(rangedData.get(0).getPeriodStart().toString() + " - " + rangedData.get(rangedData.size() - 1).getPeriodStart().toString());

        plotPanel.setData(rangedData);
        plotPanel.repaint();
    }

    /**
     * Returns main panel for attach
     *
     * @return panel to attach
     */
    public JPanel getPanelMain() {
        return panelMain;
    }

    @Override
    public void update(BitBayManager manager) {
        System.out.println("BitBayWindow updating");

        currencyData = manager.getCurrencyData(
                BitBayManager.TradeType.ETHPLN,
                ExchangeManager.CurrencyDataPeriodType.DAILY);

        refresh();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridBagLayout());
        panelMain.setBackground(new Color(-1513240));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridBagLayout());
        panel1.setMinimumSize(new Dimension(600, 600));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(1, 1, 1, 1);
        panelMain.add(panel1, gbc);
        plotPanel = new BitBayPlotPanel();
        plotPanel.setPreferredSize(new Dimension(600, 300));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        panel1.add(plotPanel, gbc);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        panel2.setMinimumSize(new Dimension(500, 96));
        panel2.setPreferredSize(new Dimension(500, 96));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        panelMain.add(panel2, gbc);
        startSpinner = new JSpinner();
        startSpinner.setMinimumSize(new Dimension(100, 26));
        startSpinner.setPreferredSize(new Dimension(100, 26));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel2.add(startSpinner, gbc);
        rangeLabel = new JLabel();
        rangeLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.weightx = 3.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(rangeLabel, gbc);
        rangeSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        panel2.add(rangeSpinner, gbc);
        averagesCheckBox = new JCheckBox();
        averagesCheckBox.setBorderPaintedFlat(true);
        averagesCheckBox.setText("Averages");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(averagesCheckBox, gbc);
        lastCheckBox = new JCheckBox();
        lastCheckBox.setText("Last records");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(lastCheckBox, gbc);
        final JLabel label1 = new JLabel();
        label1.setText("Start");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 0.5;
        gbc.anchor = GridBagConstraints.EAST;
        panel2.add(label1, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Range");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.EAST;
        panel2.add(label2, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridBagLayout());
        panel3.setMinimumSize(new Dimension(24, 100));
        panel3.setOpaque(true);
        panel3.setPreferredSize(new Dimension(24, 100));
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.gridwidth = 2;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(1, 1, 1, 1);
        panelMain.add(panel3, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
