import model.BitBayCurrencyData;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.ArrayList;

public class BitBayWindow implements BitBayCurrencyObserver {
    private JButton refreshButton;
    private PlotPanel plotPanel;
    private JPanel panelMain;
    private JSpinner fromSpinner;
    private JSpinner toSpinner;
    private JLabel fromLabel;
    private JLabel toLabel;

    private ArrayList<BitBayCurrencyData> data;

    private int rangeStart;
    private int rangeEnd;

    private final BitBayManager bitBayManager;

    public BitBayWindow() throws SQLException {
        bitBayManager = new BitBayManager();

        bitBayManager.attachObserver(this);
        bitBayManager.updateCurrencyData(BitBayManager.TradeType.ETHPLN, ExchangeManager.CurrencyDataPeriodType.DAILY);
        bitBayManager.notifyAllObservers();

        refreshButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                setRange((int) fromSpinner.getValue(), (int) toSpinner.getValue());
                fromLabel.setText(data.get(rangeStart).getPeriodStart().toString());
                toLabel.setText(data.get(rangeEnd).getPeriodStart().toString());
                drawRangedData();
            }
        });
    }

    public void setRange(int start, int end) throws NullPointerException {
        if (start > end) start = end;
        if (start < 0) start = 0;
        if (end < 0) end = 0;
        if (start >= data.size()) start = data.size() - 1;
        if (end >= data.size()) end = data.size() - 1;

        rangeStart = start;
        rangeEnd = end;
    }

    public void drawRangedData() {
        if (data != null) {
            plotPanel.setData(data.subList(rangeStart, rangeEnd + 1));
            plotPanel.repaint();
        }
    }

    /**
     * Returns main panel for attach
     *
     * @return panel to attach
     */
    public JPanel getPanelMain() {
        return panelMain;
    }

    @Override
    public void update(BitBayManager manager) {
        System.out.println("BitBayWindow updating");

        data = manager.getCurrencyDataAll(
                BitBayManager.TradeType.ETHPLN,
                ExchangeManager.CurrencyDataPeriodType.DAILY);

        drawRangedData();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panelMain = new JPanel();
        panelMain.setLayout(new GridBagLayout());
        panelMain.setBackground(new Color(-16777216));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setMinimumSize(new Dimension(600, 600));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(1, 1, 1, 1);
        panelMain.add(panel1, gbc);
        plotPanel = new PlotPanel();
        panel1.add(plotPanel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(600, 600), null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridBagLayout());
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(1, 1, 1, 1);
        panelMain.add(panel2, gbc);
        refreshButton = new JButton();
        refreshButton.setBackground(new Color(-1513240));
        refreshButton.setHorizontalAlignment(0);
        refreshButton.setHorizontalTextPosition(11);
        refreshButton.setText("Refresh");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        panel2.add(refreshButton, gbc);
        fromSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(fromSpinner, gbc);
        toSpinner = new JSpinner();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel2.add(toSpinner, gbc);
        fromLabel = new JLabel();
        fromLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.weightx = 2.0;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(fromLabel, gbc);
        toLabel = new JLabel();
        toLabel.setText("Label");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        panel2.add(toLabel, gbc);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.gridheight = 2;
        gbc.fill = GridBagConstraints.BOTH;
        gbc.insets = new Insets(1, 1, 1, 1);
        panelMain.add(panel3, gbc);
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel3.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, 1, new Dimension(100, 100), new Dimension(100, 100), null, 1, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel3.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panelMain;
    }
}
